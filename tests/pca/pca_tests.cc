#include <armadillo>
#include <clusterxx.hpp>
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

TEST_CASE("Testing default PCA", "[PCA]") {
    arma::mat features = {{-1, -1}, {-2, -1}, {-3, -2}, {1, 1}, {2, 1}, {3, 2}};

    clusterxx::PCA pca = clusterxx::PCA(2);
    arma::mat pca_features = pca.fit_transform(features);
    arma::vec explained_variance_ = pca.get_explained_variance();
    arma::vec check = {7.93954312, 0.06045688};
    for (size_t i = 0; i < 2; i++) {
        REQUIRE_THAT(explained_variance_(i), Catch::Matchers::WithinAbs(check(i), 1e-5));
    }

    arma::mat check_2 = {{-1.38340578, -0.2935787 },
       {-2.22189802,  0.25133484},
       {-3.6053038 , -0.04224385},
       { 1.38340578,  0.2935787 },
       { 2.22189802, -0.25133484},
       { 3.6053038 ,  0.04224385}};
    for (size_t i = 0; i < features.n_rows; i++) {
        for (size_t j = 0; j < features.n_cols; j++) {
            REQUIRE_THAT(std::abs(pca_features(i, j)), Catch::Matchers::WithinAbs(std::abs(check_2(i, j)), 1e-5));
        }
    }
}

TEST_CASE("Testing PCA with multidimensional data", "[PCA]") {
    // data generated from sklearn
    arma::mat X = {{0.05286329, 0.87527512, 0.93248843, 0.28898632, 0.00448761,
        0.95698544, 0.78307759, 0.23738351, 0.64496829, 0.06471989,
        0.87706764, 0.12533253, 0.65352021, 0.64862198, 0.19728356,
        0.36301283, 0.05734816, 0.13623338, 0.45269318, 0.30770602,
        0.21468652, 0.67755849, 0.79433021, 0.05223078, 0.69696376,
        0.51983562, 0.32800622, 0.33396807, 0.44651367, 0.58101749},
       {0.66115017, 0.0229762 , 0.81390627, 0.44594169, 0.73655325,
        0.41075765, 0.06349764, 0.35197977, 0.25363888, 0.41422616,
        0.77786324, 0.21366877, 0.47789645, 0.77670835, 0.51162182,
        0.09584861, 0.27804972, 0.80025057, 0.04827347, 0.10332963,
        0.31133158, 0.62465303, 0.78917228, 0.07523381, 0.91810239,
        0.2815638 , 0.91515318, 0.56151176, 0.95357364, 0.34169015},
       {0.25123444, 0.25995031, 0.9365961 , 0.43001239, 0.19327883,
        0.6993244 , 0.76237898, 0.74110291, 0.51249006, 0.1320746 ,
        0.79511844, 0.34136721, 0.4322782 , 0.36927365, 0.11848362,
        0.59704915, 0.20204256, 0.27471872, 0.11616164, 0.3839168 ,
        0.50577957, 0.88659253, 0.84030386, 0.55614361, 0.35606986,
        0.61460168, 0.62450288, 0.73516892, 0.67901261, 0.74109734},
       {0.32378769, 0.95640447, 0.31229818, 0.05153038, 0.56349909,
        0.31069489, 0.90972541, 0.860585  , 0.10877701, 0.60878636,
        0.04881506, 0.30163696, 0.79247148, 0.65657135, 0.81035635,
        0.91432946, 0.29664529, 0.10563744, 0.73525808, 0.47206336,
        0.67465299, 0.51663433, 0.50128046, 0.46850436, 0.68788279,
        0.9494271 , 0.01823687, 0.79558211, 0.32394274, 0.48679707},
       {0.98759882, 0.53813561, 0.88159863, 0.60713211, 0.90723583,
        0.28527756, 0.9940965 , 0.72617756, 0.99141632, 0.35449369,
        0.69156231, 0.35633159, 0.93460726, 0.35648192, 0.19484909,
        0.86538074, 0.15883601, 0.97813747, 0.49556526, 0.19998967,
        0.66058061, 0.52104659, 0.90313141, 0.50949999, 0.50487939,
        0.41237105, 0.34949416, 0.8192276 , 0.43404033, 0.96952682},
       {0.71753099, 0.02149585, 0.01356594, 0.12539883, 0.18704933,
        0.63087997, 0.12615034, 0.92915864, 0.36179705, 0.56375372,
        0.76786235, 0.85044698, 0.52054807, 0.93033568, 0.58217686,
        0.26821162, 0.79264095, 0.33890606, 0.090255  , 0.93038793,
        0.81865646, 0.46965262, 0.11946295, 0.55407405, 0.19978974,
        0.13235656, 0.63506068, 0.07025947, 0.34626842, 0.01683803},
       {0.89336738, 0.87259602, 0.45544996, 0.14398991, 0.94420923,
        0.58423154, 0.68768214, 0.46436938, 0.29282726, 0.819731  ,
        0.13206878, 0.70086727, 0.02111217, 0.24033759, 0.48842414,
        0.14841929, 0.38755091, 0.03633829, 0.82149683, 0.68351252,
        0.33880919, 0.55070935, 0.44747071, 0.21557074, 0.98049776,
        0.69388589, 0.47534026, 0.6462489 , 0.84182404, 0.0818794 },
       {0.31785523, 0.30801182, 0.48348938, 0.40438667, 0.59351854,
        0.10072937, 0.55050319, 0.84839294, 0.9308539 , 0.26498232,
        0.14571488, 0.08925962, 0.60542055, 0.33316694, 0.06492537,
        0.25046154, 0.80425337, 0.32513882, 0.97790197, 0.75332458,
        0.22067083, 0.42076415, 0.22341297, 0.94976499, 0.31277623,
        0.96975598, 0.10358635, 0.22829272, 0.98277026, 0.7464218 },
       {0.81757975, 0.66830055, 0.79301634, 0.88277643, 0.9185356 ,
        0.75997991, 0.40891575, 0.14679522, 0.79681658, 0.58788234,
        0.22316683, 0.06915048, 0.9339739 , 0.0430047 , 0.4628809 ,
        0.75542587, 0.19030566, 0.86108904, 0.8813454 , 0.46455249,
        0.60465917, 0.75971767, 0.40513583, 0.43170138, 0.52815867,
        0.26389383, 0.99019344, 0.62357344, 0.10107818, 0.32875691},
       {0.44478967, 0.59432476, 0.37156306, 0.90763786, 0.9412897 ,
        0.22188997, 0.21051935, 0.51803379, 0.04694515, 0.10441554,
        0.27300783, 0.42999   , 0.44241966, 0.55247734, 0.21029582,
        0.71229073, 0.81834145, 0.81843631, 0.70763373, 0.54406694,
        0.93946839, 0.20870104, 0.04881321, 0.23487643, 0.21693939,
        0.38067785, 0.63152686, 0.34817049, 0.40177416, 0.88930259}};

    clusterxx::PCA pca = clusterxx::PCA(3);
    arma::mat pca_features = pca.fit_transform(X);
    arma::mat check = {{ 0.72695388, -0.46217732, -0.97339997},
                       { 0.13652097, -1.17931993,  0.21225336},
                       { 0.5226267 , -0.48256511, -0.50534854},
                       {-0.19389871,  0.97139006, -0.63172267},
                       { 1.02456817,  0.25848981,  0.50866326},
                       {-1.49207225, -0.82120628,  0.08795161},
                       {-0.48112653,  0.40306524, -0.45864615},
                       {-0.40178211,  0.84072406, -0.20126215},
                       { 0.6324944 ,  0.18321837,  0.95693213},
                       {-0.47428452,  0.28838109,  1.00457911}};

    for (size_t i = 0; i < check.n_rows; i++) {
        for (size_t j = 0; j < check.n_cols; j++) {
            REQUIRE_THAT(std::abs(pca_features(i, j)), Catch::Matchers::WithinAbs(std::abs(check(i, j)), 1e-5));
        }
    }
}
