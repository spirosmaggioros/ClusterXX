#include <catch2/catch_test_macros.hpp>
#include <armadillo>
#include <clusterxx.hpp>

TEST_CASE("Testing k-d tree query", "[k-d tree]") {
    arma::mat X = {{1.0, 1.0}, {3.0, 3.0}, {2.0, 2.0}};
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);

    arma::vec target = {1.0, 1.0};
    auto [indices, dists] = kd_tree.query(target, 3);

    REQUIRE(indices[0] == 1);
    REQUIRE(indices[1] == 2);
    REQUIRE(indices[2] == 0);
}

TEST_CASE("Testing kd-tree query radius", "[k-d tree]") {
    /* This is a dataset generated by sklearn */
    arma::mat X = {{0.5488135 , 0.71518937, 0.60276338},
                   {0.54488318, 0.4236548 , 0.64589411},
                   {0.43758721, 0.891773  , 0.96366276},
                   {0.38344152, 0.79172504, 0.52889492},
                   {0.56804456, 0.92559664, 0.07103606},
                   {0.0871293 , 0.0202184 , 0.83261985},
                   {0.77815675, 0.87001215, 0.97861834},
                   {0.79915856, 0.46147936, 0.78052918},
                   {0.11827443, 0.63992102, 0.14335329},
                   {0.94466892, 0.52184832, 0.41466194}
    };
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);
    auto [indices, dists] = kd_tree.query_radius(X.row(0).t(), 0.3);
    for (auto &x: indices) { std::cout << x << " "; }
    std::cout << '\n';

    REQUIRE(indices.size() == 3);
    REQUIRE(indices[0] == 0);
    REQUIRE(indices[1] == 3);
    REQUIRE(indices[2] == 1);
}

TEST_CASE("Testing k-d tree depth with big data", "[k-d tree]") {
    arma::mat X(2000, 2);
    for (int i = 0; i < 2000; i++) {
        X.row(i) = arma::vec({5, 5}).t();
    }
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);
    REQUIRE(kd_tree.depth() < 12);
}
