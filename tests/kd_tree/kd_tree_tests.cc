#include "clusterxx/metrics/metrics.hpp"
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include <armadillo>
#include <clusterxx.hpp>
#include <random>

TEST_CASE("Testing k-d tree query", "[k-d tree]") {
    arma::mat X = {{1.0, 1.0}, {3.0, 3.0}, {2.0, 2.0}};
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);

    arma::vec target = {1.0, 1.0};
    auto [indices, dists] = kd_tree.query(target, 3);

    REQUIRE(indices[0] == 1);
    REQUIRE(indices[1] == 2);
    REQUIRE(indices[2] == 0);
}

TEST_CASE("Testing kd-tree query radius with default distance metri", "[k-d tree]") {
    /* This is a dataset generated by sklearn */
    arma::mat X = {{0.5488135 , 0.71518937, 0.60276338},
                   {0.54488318, 0.4236548 , 0.64589411},
                   {0.43758721, 0.891773  , 0.96366276},
                   {0.38344152, 0.79172504, 0.52889492},
                   {0.56804456, 0.92559664, 0.07103606},
                   {0.0871293 , 0.0202184 , 0.83261985},
                   {0.77815675, 0.87001215, 0.97861834},
                   {0.79915856, 0.46147936, 0.78052918},
                   {0.11827443, 0.63992102, 0.14335329},
                   {0.94466892, 0.52184832, 0.41466194}
    };
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);
    auto [indices, dists] = kd_tree.query_radius(X.row(0).t(), 0.3);

    REQUIRE(indices.size() == 3);
    REQUIRE(indices[0] == 0);
    REQUIRE(indices[1] == 1);
    REQUIRE(indices[2] == 3);

    X = {{0.5488135 , 0.71518937, 0.60276338},
       {0.54488318, 0.4236548 , 0.64589411},
       {0.43758721, 0.891773  , 0.96366276},
       {0.38344152, 0.79172504, 0.52889492},
       {0.56804456, 0.92559664, 0.07103606},
       {0.0871293 , 0.0202184 , 0.83261985},
       {0.77815675, 0.87001215, 0.97861834},
       {0.79915856, 0.46147936, 0.78052918},
       {0.11827443, 0.63992102, 0.14335329},
       {0.94466892, 0.52184832, 0.41466194}};
    clusterxx::kd_tree kd_tree_2 = clusterxx::kd_tree(X);
    auto [indices_2, dists_2] = kd_tree.query(X.row(0).t(), 3);
    REQUIRE(std::find(indices_2.begin(), indices_2.end(), 0) != indices_2.end());
    REQUIRE(std::find(indices_2.begin(), indices_2.end(), 3) != indices_2.end());
    REQUIRE(std::find(indices_2.begin(), indices_2.end(), 1) != indices_2.end());

    X = {{-0.35940664, -0.32495562},
       { 0.22570402, -0.90781187},
       {-0.15532638,  0.45400551},
       {-0.1430217 , -0.45722755},
       {-0.84701618,  0.51766428},
       { 0.30799255,  0.4291827 },
       {-0.23276924,  0.47123999},
       { 0.45767852, -0.06195232},
       {-0.29365151,  0.41088073},
       { 0.12360631, -0.99916064},
       { 0.70589463, -0.69142641},
       { 0.52280183, -0.92934732},
       {-0.45922902, -0.23718001},
       {-0.57150909,  0.76278888},
       { 0.42764846,  0.18373219},
       { 0.40311395,  1.00554409},
       {-0.54793482, -0.0488495 },
       { 0.96194081, -0.12877446},
       { 0.35710324,  0.31316348},
       {-0.41960458,  0.93761881},
       { 0.0267754 ,  0.50399888},
       {-0.28497727, -0.5014644 },
       {-0.52869814, -0.23252729},
       {-0.48866094,  0.19135599},
       { 0.11564771,  0.47839831},
       { 0.500593  ,  0.86194834},
       {-0.0243255 , -0.5562242 },
       {-0.827819  , -0.52367132},
       {-0.98979851,  0.37018218},
       { 0.96030735, -0.01190598},
       {-1.06462025, -0.14012788},
       {-0.90369978, -0.32070958},
       { 0.38204515,  0.26124751},
       { 0.13942693,  0.91346151},
       {-0.70257079, -0.81725246},
       { 0.23797784, -0.33589091},
       { 0.44952632, -0.23102245},
       {-0.22040334, -0.95074675},
       {-0.42329014,  0.34403544},
       { 0.95375508,  0.27748829},
       {-0.12723566,  1.01099324},
       { 0.76679532,  0.63851191},
       {-0.40022948, -0.88548635},
       { 0.85197242,  0.54982397},
       { 0.87448253, -0.5658689 },
       {-1.05595174,  0.13502632},
       { 0.31690905, -0.38805298},
       { 0.18808357, -0.42590286},
       { 0.48995072, -0.06944899},
       {-0.45859109,  0.04282767}};

    clusterxx::kd_tree kd_tree3 = clusterxx::kd_tree(X);
    auto [inds_3, dists_3] = kd_tree3.query_radius(X.row(0).t(), 0.3);

    std::vector<int> checks = {12, 22, 21, 3, 0};
    for (auto &x: checks) {
        REQUIRE(std::find(inds_3.begin(), inds_3.end(), x) != inds_3.end());
    }
}

TEST_CASE("Testing k-d tree query radius with manhattan distances", "[k-d tree]") {
    arma::mat X = {{0.5488135 , 0.71518937, 0.60276338},
       {0.54488318, 0.4236548 , 0.64589411},
       {0.43758721, 0.891773  , 0.96366276},
       {0.38344152, 0.79172504, 0.52889492},
       {0.56804456, 0.92559664, 0.07103606},
       {0.0871293 , 0.0202184 , 0.83261985},
       {0.77815675, 0.87001215, 0.97861834},
       {0.79915856, 0.46147936, 0.78052918},
       {0.11827443, 0.63992102, 0.14335329},
       {0.94466892, 0.52184832, 0.41466194}};
    clusterxx::kd_tree<clusterxx::metrics::manhattan_distance, clusterxx::pairwise_distances::manhattan_distances> kd_tree = 
        clusterxx::kd_tree<clusterxx::metrics::manhattan_distance, clusterxx::pairwise_distances::manhattan_distances>(X, 2);
    auto [inds, dists] = kd_tree.query(X.row(0).t(), 3);
    REQUIRE_THAT(dists[0], Catch::Matchers::WithinAbsMatcher(0.33859562, 1e-5));
    REQUIRE_THAT(dists[1], Catch::Matchers::WithinAbsMatcher(0.31577611, 1e-5));
    REQUIRE(dists[2] == 0.0);
    REQUIRE(std::find(inds.begin(), inds.end(), 0) != inds.end());
    REQUIRE(std::find(inds.begin(), inds.end(), 1) != inds.end());
    REQUIRE(std::find(inds.begin(), inds.end(), 3) != inds.end());

    X = {{0.60907932, 0.18477457, 0.75676561, 0.07899625, 0.94641551,
        0.46822149, 0.33612309, 0.11680701, 0.43259664, 0.65980403},
       {0.09448728, 0.3062691 , 0.83601758, 0.64618103, 0.20637301,
        0.1609098 , 0.90448503, 0.28702022, 0.17950017, 0.99996402},
       {0.30919183, 0.12474019, 0.46175763, 0.43434511, 0.92680248,
        0.13420495, 0.09113641, 0.09297867, 0.90428747, 0.44936918},
       {0.15060653, 0.5938301 , 0.53762336, 0.19840675, 0.60303814,
        0.34023123, 0.23837077, 0.51040061, 0.29164926, 0.22213992},
       {0.87972241, 0.15576258, 0.28058998, 0.38613838, 0.27363831,
        0.21071064, 0.7711461 , 0.32901616, 0.11251296, 0.54089516},
       {0.1254885 , 0.35751961, 0.88182676, 0.3691612 , 0.63250897,
        0.51462554, 0.13772485, 0.6490696 , 0.856035  , 0.09321247},
       {0.75368009, 0.69021128, 0.86666057, 0.10409193, 0.30569538,
        0.69429149, 0.02201798, 0.73407568, 0.85797858, 0.45330405},
       {0.4343299 , 0.27846896, 0.00505187, 0.18630352, 0.97986412,
        0.86728608, 0.26650464, 0.96374886, 0.36771262, 0.29758537},
       {0.15280764, 0.90161107, 0.98699249, 0.3274114 , 0.70343042,
        0.33530341, 0.10499074, 0.39269231, 0.55156996, 0.12301676},
       {0.81827277, 0.49736312, 0.23438295, 0.59275958, 0.79325931,
        0.32762435, 0.70147632, 0.42785918, 0.96405117, 0.77094009},
       {0.3563509 , 0.01774796, 0.6575199 , 0.19787216, 0.12187918,
        0.93177645, 0.99994897, 0.26988882, 0.30176855, 0.16498894},
       {0.45768478, 0.86584376, 0.70150595, 0.84633156, 0.22848166,
        0.73045607, 0.91852663, 0.28141611, 0.69065354, 0.40065741},
       {0.29022665, 0.96962347, 0.34863323, 0.10784968, 0.38858921,
        0.44767829, 0.75221083, 0.94991427, 0.81705698, 0.93094131},
       {0.47506013, 0.71931657, 0.30904959, 0.06958711, 0.36547353,
        0.69791523, 0.27462211, 0.8614059 , 0.79077285, 0.19404255},
       {0.33083676, 0.82530262, 0.24393779, 0.33160215, 0.34306693,
        0.80104203, 0.03703027, 0.07378698, 0.57845155, 0.39711199},
       {0.63288532, 0.26646128, 0.90958268, 0.76094189, 0.06774622,
        0.78390548, 0.96958237, 0.94243562, 0.7354838 , 0.12359375},
       {0.57607677, 0.28423273, 0.97021294, 0.71748573, 0.61076559,
        0.69508804, 0.43797913, 0.37273675, 0.93579958, 0.33192713},
       {0.04143613, 0.40084015, 0.79034035, 0.64846836, 0.96217078,
        0.10620187, 0.9115463 , 0.36884919, 0.47400259, 0.42848215},
       {0.11645228, 0.24779646, 0.74227157, 0.02300754, 0.13388777,
        0.02521017, 0.85738806, 0.61732483, 0.16992866, 0.76877222},
       {0.9668006 , 0.93456037, 0.92154755, 0.00781022, 0.58901349,
        0.25663262, 0.56464721, 0.31803029, 0.15366654, 0.44449372},
       {0.49509633, 0.98976551, 0.04238788, 0.3011552 , 0.85189385,
        0.6596955 , 0.82668303, 0.66029092, 0.75953631, 0.49292175},
       {0.20487769, 0.81000386, 0.56782065, 0.13950519, 0.80489403,
        0.95858591, 0.34616387, 0.29351225, 0.08177518, 0.66449123},
       {0.95896162, 0.13599269, 0.48515963, 0.09823818, 0.0341099 ,
        0.66450105, 0.86768718, 0.33757054, 0.87576517, 0.1170531 },
       {0.23796068, 0.90160673, 0.50850989, 0.60819238, 0.03801823,
        0.12838991, 0.05579081, 0.90500074, 0.13479496, 0.84967283},
       {0.3510347 , 0.8005975 , 0.36504355, 0.26768404, 0.0936607 ,
        0.28070659, 0.47147972, 0.8175088 , 0.45251495, 0.97143557},
       {0.54163301, 0.02494563, 0.4153673 , 0.68889911, 0.23429165,
        0.69862995, 0.50369731, 0.02573778, 0.77435295, 0.5603737 },
       {0.0824935 , 0.47521403, 0.28729288, 0.87968154, 0.28492705,
        0.94168707, 0.54613275, 0.32361371, 0.81354502, 0.69740038},
       {0.4139625 , 0.6296183 , 0.77858426, 0.85155779, 0.81641271,
        0.16607709, 0.82838955, 0.05862906, 0.20017068, 0.62292672},
       {0.11469253, 0.6033476 , 0.30796569, 0.42946659, 0.3151515 ,
        0.07017357, 0.50075875, 0.96359944, 0.61178335, 0.30003187},
       {0.95614983, 0.38923725, 0.69751773, 0.6341128 , 0.95291085,
        0.91460269, 0.14800406, 0.08568587, 0.80964233, 0.90494321}};

    clusterxx::kd_tree<clusterxx::metrics::manhattan_distance, clusterxx::pairwise_distances::manhattan_distances> kd_tree_2 =
        clusterxx::kd_tree<clusterxx::metrics::manhattan_distance, clusterxx::pairwise_distances::manhattan_distances>(X, 2);

    auto [inds_2, dists_2] = kd_tree_2.query(X.row(0).t(), 5);
    REQUIRE(std::find(inds_2.begin(), inds_2.end(), 0) != inds_2.end());
    REQUIRE(std::find(inds_2.begin(), inds_2.end(), 2) != inds_2.end());
    REQUIRE(std::find(inds_2.begin(), inds_2.end(), 21) != inds_2.end());
    REQUIRE(std::find(inds_2.begin(), inds_2.end(), 29) != inds_2.end());
    REQUIRE(std::find(inds_2.begin(), inds_2.end(), 27) != inds_2.end());
}

TEST_CASE("Testing k-d tree depth with big data", "[k-d tree]") {
    arma::mat X(2000, 2);
    for (int i = 0; i < 2000; i++) {
        X.row(i) = arma::vec({5, 5}).t();
    }
    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);
    REQUIRE(kd_tree.depth() < 12);
}

TEST_CASE("Testing k-d tree for duplicate returned indices", "[k-d tree]") {
    arma::mat X(5000, 2);
    std::uniform_real_distribution<double> unif(-1.0, 1.0);
    std::default_random_engine re;
    for (int i = 0; i < 5000; i++) {
        std::vector<double> _curr = {unif(re), unif(re)};
        X.row(i) = arma::vec(_curr).t();
    }

    clusterxx::kd_tree kd_tree = clusterxx::kd_tree(X);
    for (int i = 0; i < 5; i++) {
        std::vector<double> target = {unif(re), unif(re)};
        arma::vec target_vec = arma::vec(target);
        auto [inds, _] = kd_tree.query_radius(target_vec, 0.5);
        REQUIRE(!inds.empty());
        auto unique_it = std::unique(inds.begin(), inds.end());
        REQUIRE(unique_it == inds.end());
    }
}
